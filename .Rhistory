knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(warn = -1)
suppressPackageStartupMessages({
library(preprocessCore)
library(umap)
library(ggplot2)
library(multcomp)
library(gplots)
library(factoextra)
library(dplyr)
library(kableExtra)
library(gprofiler2)
library(randomForest)
library(caret)
library(cowplot)
library(RColorBrewer)
library(plotly)
})
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(warn = -1)
suppressPackageStartupMessages({
library(preprocessCore)
library(umap)
library(ggplot2)
library(multcomp)
library(gplots)
library(factoextra)
library(dplyr)
library(kableExtra)
library(gprofiler2)
library(randomForest)
library(caret)
library(cowplot)
library(RColorBrewer)
library(plotly)
})
# Read file
data = read.delim(file = "Raw_common18704genes_antiTNF.tsv",
header = T,
row.names = 1,
sep = "\t")
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(warn = -1)
suppressPackageStartupMessages({
library(preprocessCore)
library(umap)
library(ggplot2)
library(multcomp)
library(gplots)
library(factoextra)
library(dplyr)
library(kableExtra)
library(gprofiler2)
library(randomForest)
library(caret)
library(cowplot)
library(RColorBrewer)
library(plotly)
})
# Read file
data = read.delim(file = "Raw_common18704genes_antiTNF.tsv",
header = T,
row.names = 1,
sep = "\t")
#| label: fig-boxplot
#| fig-cap: "Boxplot of data before quantile normalization"
boxplot(data, horizontal = T, las = 1, cex.axis = 0.5)
# Show head of dataframe
kable(head(data)) |>
kable_styling(bootstrap_options = c("striped")) |>
scroll_box(width = "100%", height = "100%") |>
kable_classic()
# Check genes_data for missing values
colSums(is.na(data))
#| label: fig-distribution
#| fig-cap: "Data distribution before quantile normalization"
# Adjust the layout and margins
par(mfrow = c(8, 9), mar = c(1, 1, 2.5, 1))
for (col in colnames(data)) {
plot(density(data[[col]]),
main = col,
xlab = col, col = "#009AEF", lwd = 2)
}
data %>%
select_if(is.numeric) %>%
apply(2, function(x) round(summary(x), 3)) %>%
kbl() %>%
kable_styling(bootstrap_options = c("striped", "bordered")) %>%
kable_classic() %>%
scroll_box(width = "100%", height = "100%")
calculate_metrics = function(data.frame) {
max <- apply(data.frame, 2, max)
min <- apply(data.frame, 2, min)
mean <- (max + min) / 2
dt_matrix = data.frame(name = colnames(data.frame),
min = as.numeric(as.character(min)),
max = as.numeric(as.character(max)),
mean = as.numeric(as.character(mean)))
return(dt_matrix)
}
# Calculate metrics for each condition
c_metrics = calculate_metrics(data)
c_metrics
# Convert dataframe to matrix
data = as.matrix(data)
# Normalize data
data = normalize.quantiles(data , copy=TRUE)
# Convert matrix to dataframe
data = data.frame(data)
# Add column names to dataframe
colnames(data) = Sample
#| label: fig-boxplot
#| fig-cap: "Boxplot of data after quantile normalization"
boxplot(data, horizontal = T, las = 1, cex.axis = 0.5)
# Convert dataframe to matrix
data = as.matrix(data)
# Normalize data
data = normalize.quantiles(data , copy=TRUE)
# Convert matrix to dataframe
data = data.frame(data)
# Add column names to dataframe
colnames(data) = Sample
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
options(warn = -1)
suppressPackageStartupMessages({
library(preprocessCore)
library(umap)
library(ggplot2)
library(multcomp)
library(gplots)
library(factoextra)
library(dplyr)
library(kableExtra)
library(gprofiler2)
library(randomForest)
library(caret)
library(cowplot)
library(RColorBrewer)
library(plotly)
})
# Get the cluster assignments
mt <- as.hclust(heatmap$rowDendrogram)
